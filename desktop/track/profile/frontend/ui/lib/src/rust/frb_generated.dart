// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/bridge.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiBridgeInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -530070580;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_ui',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<Uint8List> crateApiBridgeBridgeGenerateGpx({required Bridge that});

  Future<Uint8List> crateApiBridgeBridgeGeneratePdf({required Bridge that});

  Parameters crateApiBridgeBridgeGetParameters({required Bridge that});

  List<Waypoint> crateApiBridgeBridgeGetWaypoints({
    required Bridge that,
    required Segment segment,
  });

  Future<void> crateApiBridgeBridgeLoadContent({
    required Bridge that,
    required List<int> content,
  });

  Future<void> crateApiBridgeBridgeLoadDemo({required Bridge that});

  Future<void> crateApiBridgeBridgeLoadFilename({
    required Bridge that,
    required String filename,
  });

  Bridge crateApiBridgeBridgeMake();

  Future<String> crateApiBridgeBridgeRenderSegmentWhat({
    required Bridge that,
    required Segment segment,
    required String what,
    required int w,
    required int h,
  });

  String crateApiBridgeBridgeRenderSegmentWhatSync({
    required Bridge that,
    required Segment segment,
    required String what,
    required int w,
    required int h,
  });

  List<Segment> crateApiBridgeBridgeSegments({required Bridge that});

  void crateApiBridgeBridgeSetParameters({
    required Bridge that,
    required Parameters parameters,
  });

  Stream<String> crateApiBridgeBridgeSetSink({required Bridge that});

  SegmentStatistics crateApiBridgeBridgeStatistics({required Bridge that});

  List<Waypoint> crateApiBridgeBridgeWaypointsTable({
    required Bridge that,
    required Segment segment,
  });

  Future<Segment> crateApiBridgeSegmentCreate({
    required SegmentImplementation d,
  });

  BigInt crateApiBridgeSegmentId({required Segment that});

  String crateApiBridgeWaypointInfoAutoAccessorGetDescription({
    required WaypointInfo that,
  });

  double crateApiBridgeWaypointInfoAutoAccessorGetDistance({
    required WaypointInfo that,
  });

  double crateApiBridgeWaypointInfoAutoAccessorGetElevation({
    required WaypointInfo that,
  });

  double crateApiBridgeWaypointInfoAutoAccessorGetInterDistance({
    required WaypointInfo that,
  });

  double crateApiBridgeWaypointInfoAutoAccessorGetInterElevationGain({
    required WaypointInfo that,
  });

  double crateApiBridgeWaypointInfoAutoAccessorGetInterSlope({
    required WaypointInfo that,
  });

  String crateApiBridgeWaypointInfoAutoAccessorGetName({
    required WaypointInfo that,
  });

  WaypointOrigin crateApiBridgeWaypointInfoAutoAccessorGetOrigin({
    required WaypointInfo that,
  });

  String crateApiBridgeWaypointInfoAutoAccessorGetTime({
    required WaypointInfo that,
  });

  BigInt crateApiBridgeWaypointInfoAutoAccessorGetTrackIndex({
    required WaypointInfo that,
  });

  BigInt? crateApiBridgeWaypointInfoAutoAccessorGetValue({
    required WaypointInfo that,
  });

  Wgs84Point crateApiBridgeWaypointInfoAutoAccessorGetWgs84({
    required WaypointInfo that,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetDescription({
    required WaypointInfo that,
    required String description,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetDistance({
    required WaypointInfo that,
    required double distance,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetElevation({
    required WaypointInfo that,
    required double elevation,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetInterDistance({
    required WaypointInfo that,
    required double interDistance,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetInterElevationGain({
    required WaypointInfo that,
    required double interElevationGain,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetInterSlope({
    required WaypointInfo that,
    required double interSlope,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetName({
    required WaypointInfo that,
    required String name,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetOrigin({
    required WaypointInfo that,
    required WaypointOrigin origin,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetTime({
    required WaypointInfo that,
    required String time,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetTrackIndex({
    required WaypointInfo that,
    required BigInt trackIndex,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetValue({
    required WaypointInfo that,
    BigInt? value,
  });

  void crateApiBridgeWaypointInfoAutoAccessorSetWgs84({
    required WaypointInfo that,
    required Wgs84Point wgs84,
  });

  String? crateApiBridgeWaypointAutoAccessorGetDescription({
    required Waypoint that,
  });

  WaypointInfo? crateApiBridgeWaypointAutoAccessorGetInfo({
    required Waypoint that,
  });

  String? crateApiBridgeWaypointAutoAccessorGetName({required Waypoint that});

  WaypointOrigin crateApiBridgeWaypointAutoAccessorGetOrigin({
    required Waypoint that,
  });

  BigInt? crateApiBridgeWaypointAutoAccessorGetTrackIndex({
    required Waypoint that,
  });

  Wgs84Point crateApiBridgeWaypointAutoAccessorGetWgs84({
    required Waypoint that,
  });

  void crateApiBridgeWaypointAutoAccessorSetDescription({
    required Waypoint that,
    String? description,
  });

  void crateApiBridgeWaypointAutoAccessorSetInfo({
    required Waypoint that,
    WaypointInfo? info,
  });

  void crateApiBridgeWaypointAutoAccessorSetName({
    required Waypoint that,
    String? name,
  });

  void crateApiBridgeWaypointAutoAccessorSetOrigin({
    required Waypoint that,
    required WaypointOrigin origin,
  });

  void crateApiBridgeWaypointAutoAccessorSetTrackIndex({
    required Waypoint that,
    BigInt? trackIndex,
  });

  void crateApiBridgeWaypointAutoAccessorSetWgs84({
    required Waypoint that,
    required Wgs84Point wgs84,
  });

  Future<void> crateApiBridgeInitApp();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Bridge;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Bridge;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BridgePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Segment;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Segment;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SegmentPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SegmentImplementation;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SegmentImplementation;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SegmentImplementationPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Wgs84Point;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Wgs84Point;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Wgs84PointPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Waypoint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Waypoint;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WaypointPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_WaypointInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_WaypointInfo;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WaypointInfoPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Uint8List> crateApiBridgeBridgeGenerateGpx({required Bridge that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeGenerateGpxConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeGenerateGpxConstMeta =>
      const TaskConstMeta(debugName: "Bridge_generateGpx", argNames: ["that"]);

  @override
  Future<Uint8List> crateApiBridgeBridgeGeneratePdf({required Bridge that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeGeneratePdfConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeGeneratePdfConstMeta =>
      const TaskConstMeta(debugName: "Bridge_generatePdf", argNames: ["that"]);

  @override
  Parameters crateApiBridgeBridgeGetParameters({required Bridge that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_parameters,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeGetParametersConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeGetParametersConstMeta =>
      const TaskConstMeta(
        debugName: "Bridge_get_parameters",
        argNames: ["that"],
      );

  @override
  List<Waypoint> crateApiBridgeBridgeGetWaypoints({
    required Bridge that,
    required Segment segment,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
            segment,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeGetWaypointsConstMeta,
        argValues: [that, segment],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeGetWaypointsConstMeta =>
      const TaskConstMeta(
        debugName: "Bridge_get_waypoints",
        argNames: ["that", "segment"],
      );

  @override
  Future<void> crateApiBridgeBridgeLoadContent({
    required Bridge that,
    required List<int> content,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          sse_encode_list_prim_u_8_loose(content, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_error,
        ),
        constMeta: kCrateApiBridgeBridgeLoadContentConstMeta,
        argValues: [that, content],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeLoadContentConstMeta =>
      const TaskConstMeta(
        debugName: "Bridge_load_content",
        argNames: ["that", "content"],
      );

  @override
  Future<void> crateApiBridgeBridgeLoadDemo({required Bridge that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_error,
        ),
        constMeta: kCrateApiBridgeBridgeLoadDemoConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeLoadDemoConstMeta =>
      const TaskConstMeta(debugName: "Bridge_load_demo", argNames: ["that"]);

  @override
  Future<void> crateApiBridgeBridgeLoadFilename({
    required Bridge that,
    required String filename,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          sse_encode_String(filename, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_error,
        ),
        constMeta: kCrateApiBridgeBridgeLoadFilenameConstMeta,
        argValues: [that, filename],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeLoadFilenameConstMeta =>
      const TaskConstMeta(
        debugName: "Bridge_load_filename",
        argNames: ["that", "filename"],
      );

  @override
  Bridge crateApiBridgeBridgeMake() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeMakeConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeMakeConstMeta =>
      const TaskConstMeta(debugName: "Bridge_make", argNames: []);

  @override
  Future<String> crateApiBridgeBridgeRenderSegmentWhat({
    required Bridge that,
    required Segment segment,
    required String what,
    required int w,
    required int h,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
            segment,
            serializer,
          );
          sse_encode_String(what, serializer);
          sse_encode_i_32(w, serializer);
          sse_encode_i_32(h, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeRenderSegmentWhatConstMeta,
        argValues: [that, segment, what, w, h],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeRenderSegmentWhatConstMeta =>
      const TaskConstMeta(
        debugName: "Bridge_renderSegmentWhat",
        argNames: ["that", "segment", "what", "w", "h"],
      );

  @override
  String crateApiBridgeBridgeRenderSegmentWhatSync({
    required Bridge that,
    required Segment segment,
    required String what,
    required int w,
    required int h,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
            segment,
            serializer,
          );
          sse_encode_String(what, serializer);
          sse_encode_i_32(w, serializer);
          sse_encode_i_32(h, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeRenderSegmentWhatSyncConstMeta,
        argValues: [that, segment, what, w, h],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeRenderSegmentWhatSyncConstMeta =>
      const TaskConstMeta(
        debugName: "Bridge_renderSegmentWhatSync",
        argNames: ["that", "segment", "what", "w", "h"],
      );

  @override
  List<Segment> crateApiBridgeBridgeSegments({required Bridge that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeSegmentsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeSegmentsConstMeta =>
      const TaskConstMeta(debugName: "Bridge_segments", argNames: ["that"]);

  @override
  void crateApiBridgeBridgeSetParameters({
    required Bridge that,
    required Parameters parameters,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          sse_encode_box_autoadd_parameters(parameters, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeSetParametersConstMeta,
        argValues: [that, parameters],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeSetParametersConstMeta =>
      const TaskConstMeta(
        debugName: "Bridge_set_parameters",
        argNames: ["that", "parameters"],
      );

  @override
  Stream<String> crateApiBridgeBridgeSetSink({required Bridge that}) {
    final sink = RustStreamSink<String>();
    handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          sse_encode_StreamSink_String_Sse(sink, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBridgeBridgeSetSinkConstMeta,
        argValues: [that, sink],
        apiImpl: this,
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateApiBridgeBridgeSetSinkConstMeta =>
      const TaskConstMeta(
        debugName: "Bridge_set_sink",
        argNames: ["that", "sink"],
      );

  @override
  SegmentStatistics crateApiBridgeBridgeStatistics({required Bridge that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_segment_statistics,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeStatisticsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeStatisticsConstMeta =>
      const TaskConstMeta(debugName: "Bridge_statistics", argNames: ["that"]);

  @override
  List<Waypoint> crateApiBridgeBridgeWaypointsTable({
    required Bridge that,
    required Segment segment,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
            segment,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeBridgeWaypointsTableConstMeta,
        argValues: [that, segment],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeBridgeWaypointsTableConstMeta =>
      const TaskConstMeta(
        debugName: "Bridge_waypoints_table",
        argNames: ["that", "segment"],
      );

  @override
  Future<Segment> crateApiBridgeSegmentCreate({
    required SegmentImplementation d,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegmentImplementation(
            d,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeSegmentCreateConstMeta,
        argValues: [d],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeSegmentCreateConstMeta =>
      const TaskConstMeta(debugName: "Segment_create", argNames: ["d"]);

  @override
  BigInt crateApiBridgeSegmentId({required Segment that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_usize,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeSegmentIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeSegmentIdConstMeta =>
      const TaskConstMeta(debugName: "Segment_id", argNames: ["that"]);

  @override
  String crateApiBridgeWaypointInfoAutoAccessorGetDescription({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiBridgeWaypointInfoAutoAccessorGetDescriptionConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorGetDescriptionConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_description",
        argNames: ["that"],
      );

  @override
  double crateApiBridgeWaypointInfoAutoAccessorGetDistance({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorGetDistanceConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorGetDistanceConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_distance",
        argNames: ["that"],
      );

  @override
  double crateApiBridgeWaypointInfoAutoAccessorGetElevation({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorGetElevationConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorGetElevationConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_elevation",
        argNames: ["that"],
      );

  @override
  double crateApiBridgeWaypointInfoAutoAccessorGetInterDistance({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiBridgeWaypointInfoAutoAccessorGetInterDistanceConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorGetInterDistanceConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_inter_distance",
        argNames: ["that"],
      );

  @override
  double crateApiBridgeWaypointInfoAutoAccessorGetInterElevationGain({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiBridgeWaypointInfoAutoAccessorGetInterElevationGainConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorGetInterElevationGainConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_inter_elevation_gain",
        argNames: ["that"],
      );

  @override
  double crateApiBridgeWaypointInfoAutoAccessorGetInterSlope({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiBridgeWaypointInfoAutoAccessorGetInterSlopeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorGetInterSlopeConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_inter_slope",
        argNames: ["that"],
      );

  @override
  String crateApiBridgeWaypointInfoAutoAccessorGetName({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorGetNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointInfoAutoAccessorGetNameConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_name",
        argNames: ["that"],
      );

  @override
  WaypointOrigin crateApiBridgeWaypointInfoAutoAccessorGetOrigin({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_waypoint_origin,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorGetOriginConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointInfoAutoAccessorGetOriginConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_origin",
        argNames: ["that"],
      );

  @override
  String crateApiBridgeWaypointInfoAutoAccessorGetTime({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorGetTimeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointInfoAutoAccessorGetTimeConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_time",
        argNames: ["that"],
      );

  @override
  BigInt crateApiBridgeWaypointInfoAutoAccessorGetTrackIndex({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_usize,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiBridgeWaypointInfoAutoAccessorGetTrackIndexConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorGetTrackIndexConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_track_index",
        argNames: ["that"],
      );

  @override
  BigInt? crateApiBridgeWaypointInfoAutoAccessorGetValue({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_usize,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorGetValueConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointInfoAutoAccessorGetValueConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_value",
        argNames: ["that"],
      );

  @override
  Wgs84Point crateApiBridgeWaypointInfoAutoAccessorGetWgs84({
    required WaypointInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorGetWgs84ConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointInfoAutoAccessorGetWgs84ConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_get_wgs84",
        argNames: ["that"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetDescription({
    required WaypointInfo that,
    required String description,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_String(description, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiBridgeWaypointInfoAutoAccessorSetDescriptionConstMeta,
        argValues: [that, description],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorSetDescriptionConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_description",
        argNames: ["that", "description"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetDistance({
    required WaypointInfo that,
    required double distance,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_f_64(distance, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorSetDistanceConstMeta,
        argValues: [that, distance],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorSetDistanceConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_distance",
        argNames: ["that", "distance"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetElevation({
    required WaypointInfo that,
    required double elevation,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_f_64(elevation, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorSetElevationConstMeta,
        argValues: [that, elevation],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorSetElevationConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_elevation",
        argNames: ["that", "elevation"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetInterDistance({
    required WaypointInfo that,
    required double interDistance,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_f_64(interDistance, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiBridgeWaypointInfoAutoAccessorSetInterDistanceConstMeta,
        argValues: [that, interDistance],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorSetInterDistanceConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_inter_distance",
        argNames: ["that", "interDistance"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetInterElevationGain({
    required WaypointInfo that,
    required double interElevationGain,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_f_64(interElevationGain, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiBridgeWaypointInfoAutoAccessorSetInterElevationGainConstMeta,
        argValues: [that, interElevationGain],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorSetInterElevationGainConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_inter_elevation_gain",
        argNames: ["that", "interElevationGain"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetInterSlope({
    required WaypointInfo that,
    required double interSlope,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_f_64(interSlope, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiBridgeWaypointInfoAutoAccessorSetInterSlopeConstMeta,
        argValues: [that, interSlope],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorSetInterSlopeConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_inter_slope",
        argNames: ["that", "interSlope"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetName({
    required WaypointInfo that,
    required String name,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorSetNameConstMeta,
        argValues: [that, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointInfoAutoAccessorSetNameConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_name",
        argNames: ["that", "name"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetOrigin({
    required WaypointInfo that,
    required WaypointOrigin origin,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_waypoint_origin(origin, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorSetOriginConstMeta,
        argValues: [that, origin],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointInfoAutoAccessorSetOriginConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_origin",
        argNames: ["that", "origin"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetTime({
    required WaypointInfo that,
    required String time,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_String(time, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorSetTimeConstMeta,
        argValues: [that, time],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointInfoAutoAccessorSetTimeConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_time",
        argNames: ["that", "time"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetTrackIndex({
    required WaypointInfo that,
    required BigInt trackIndex,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_usize(trackIndex, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiBridgeWaypointInfoAutoAccessorSetTrackIndexConstMeta,
        argValues: [that, trackIndex],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointInfoAutoAccessorSetTrackIndexConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_track_index",
        argNames: ["that", "trackIndex"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetValue({
    required WaypointInfo that,
    BigInt? value,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_usize(value, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorSetValueConstMeta,
        argValues: [that, value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointInfoAutoAccessorSetValueConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_value",
        argNames: ["that", "value"],
      );

  @override
  void crateApiBridgeWaypointInfoAutoAccessorSetWgs84({
    required WaypointInfo that,
    required Wgs84Point wgs84,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point(
            wgs84,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointInfoAutoAccessorSetWgs84ConstMeta,
        argValues: [that, wgs84],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointInfoAutoAccessorSetWgs84ConstMeta =>
      const TaskConstMeta(
        debugName: "WaypointInfo_auto_accessor_set_wgs84",
        argNames: ["that", "wgs84"],
      );

  @override
  String? crateApiBridgeWaypointAutoAccessorGetDescription({
    required Waypoint that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorGetDescriptionConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointAutoAccessorGetDescriptionConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_get_description",
        argNames: ["that"],
      );

  @override
  WaypointInfo? crateApiBridgeWaypointAutoAccessorGetInfo({
    required Waypoint that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorGetInfoConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointAutoAccessorGetInfoConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_get_info",
        argNames: ["that"],
      );

  @override
  String? crateApiBridgeWaypointAutoAccessorGetName({required Waypoint that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorGetNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointAutoAccessorGetNameConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_get_name",
        argNames: ["that"],
      );

  @override
  WaypointOrigin crateApiBridgeWaypointAutoAccessorGetOrigin({
    required Waypoint that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_waypoint_origin,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorGetOriginConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointAutoAccessorGetOriginConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_get_origin",
        argNames: ["that"],
      );

  @override
  BigInt? crateApiBridgeWaypointAutoAccessorGetTrackIndex({
    required Waypoint that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_usize,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorGetTrackIndexConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointAutoAccessorGetTrackIndexConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_get_track_index",
        argNames: ["that"],
      );

  @override
  Wgs84Point crateApiBridgeWaypointAutoAccessorGetWgs84({
    required Waypoint that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorGetWgs84ConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointAutoAccessorGetWgs84ConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_get_wgs84",
        argNames: ["that"],
      );

  @override
  void crateApiBridgeWaypointAutoAccessorSetDescription({
    required Waypoint that,
    String? description,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          sse_encode_opt_String(description, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorSetDescriptionConstMeta,
        argValues: [that, description],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiBridgeWaypointAutoAccessorSetDescriptionConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_set_description",
        argNames: ["that", "description"],
      );

  @override
  void crateApiBridgeWaypointAutoAccessorSetInfo({
    required Waypoint that,
    WaypointInfo? info,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
            info,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorSetInfoConstMeta,
        argValues: [that, info],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointAutoAccessorSetInfoConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_set_info",
        argNames: ["that", "info"],
      );

  @override
  void crateApiBridgeWaypointAutoAccessorSetName({
    required Waypoint that,
    String? name,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          sse_encode_opt_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorSetNameConstMeta,
        argValues: [that, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointAutoAccessorSetNameConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_set_name",
        argNames: ["that", "name"],
      );

  @override
  void crateApiBridgeWaypointAutoAccessorSetOrigin({
    required Waypoint that,
    required WaypointOrigin origin,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          sse_encode_waypoint_origin(origin, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorSetOriginConstMeta,
        argValues: [that, origin],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointAutoAccessorSetOriginConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_set_origin",
        argNames: ["that", "origin"],
      );

  @override
  void crateApiBridgeWaypointAutoAccessorSetTrackIndex({
    required Waypoint that,
    BigInt? trackIndex,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_usize(trackIndex, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorSetTrackIndexConstMeta,
        argValues: [that, trackIndex],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointAutoAccessorSetTrackIndexConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_set_track_index",
        argNames: ["that", "trackIndex"],
      );

  @override
  void crateApiBridgeWaypointAutoAccessorSetWgs84({
    required Waypoint that,
    required Wgs84Point wgs84,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point(
            wgs84,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeWaypointAutoAccessorSetWgs84ConstMeta,
        argValues: [that, wgs84],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeWaypointAutoAccessorSetWgs84ConstMeta =>
      const TaskConstMeta(
        debugName: "Waypoint_auto_accessor_set_wgs84",
        argNames: ["that", "wgs84"],
      );

  @override
  Future<void> crateApiBridgeInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 54,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiBridgeInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBridgeInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Bridge =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Bridge =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Segment =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Segment =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SegmentImplementation =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegmentImplementation;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SegmentImplementation =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegmentImplementation;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Wgs84Point =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Wgs84Point =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Waypoint =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Waypoint =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_WaypointInfo =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_WaypointInfo =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Bridge
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BridgeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Segment
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SegmentImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SegmentImplementation
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegmentImplementation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SegmentImplementationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wgs84Point
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Wgs84PointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Waypoint
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaypointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WaypointInfo
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaypointInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Bridge
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BridgeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Waypoint
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaypointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WaypointInfo
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaypointInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Bridge
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BridgeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Segment
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SegmentImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Waypoint
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaypointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WaypointInfo
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaypointInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Bridge
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BridgeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Segment
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SegmentImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SegmentImplementation
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegmentImplementation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SegmentImplementationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wgs84Point
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Wgs84PointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Waypoint
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaypointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WaypointInfo
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaypointInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Set<ProfileIndication> dco_decode_Set_profile_indication_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_profile_indication(raw));
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  WaypointInfo
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
      raw,
    );
  }

  @protected
  Parameters dco_decode_box_autoadd_parameters(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_parameters(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  Error dco_decode_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Error_GPXNotFound();
      case 1:
        return Error_GPXInvalid();
      case 2:
        return Error_GPXHasNoSegment();
      case 3:
        return Error_MissingElevation(index: dco_decode_usize(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Segment>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment,
        )
        .toList();
  }

  @protected
  List<Waypoint>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint,
        )
        .toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ProfileIndication> dco_decode_list_profile_indication(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_profile_indication).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  WaypointInfo?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
          raw,
        );
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  Parameters dco_decode_parameters(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Parameters(
      debug: dco_decode_bool(arr[0]),
      maxStepSize: dco_decode_f_64(arr[1]),
      startTime: dco_decode_String(arr[2]),
      speed: dco_decode_f_64(arr[3]),
      segmentLength: dco_decode_f_64(arr[4]),
      segmentOverlap: dco_decode_f_64(arr[5]),
      smoothWidth: dco_decode_f_64(arr[6]),
      profileOptions: dco_decode_profile_options(arr[7]),
      npoints: dco_decode_i_32(arr[8]),
    );
  }

  @protected
  ProfileIndication dco_decode_profile_indication(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProfileIndication.values[raw as int];
  }

  @protected
  ProfileOptions dco_decode_profile_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ProfileOptions(
      elevationIndicators: dco_decode_Set_profile_indication_None(arr[0]),
    );
  }

  @protected
  SegmentStatistics dco_decode_segment_statistics(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SegmentStatistics(
      length: dco_decode_f_64(arr[0]),
      elevationGain: dco_decode_f_64(arr[1]),
      distanceStart: dco_decode_f_64(arr[2]),
      distanceEnd: dco_decode_f_64(arr[3]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WaypointOrigin dco_decode_waypoint_origin(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WaypointOrigin.values[raw as int];
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Bridge
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BridgeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Segment
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SegmentImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SegmentImplementation
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegmentImplementation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SegmentImplementationImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Wgs84Point
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Wgs84PointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Waypoint
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WaypointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WaypointInfo
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WaypointInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Bridge
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BridgeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Waypoint
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WaypointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WaypointInfo
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WaypointInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Bridge
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BridgeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Segment
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SegmentImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Waypoint
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WaypointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WaypointInfo
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WaypointInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Bridge
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BridgeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Segment
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SegmentImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SegmentImplementation
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegmentImplementation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SegmentImplementationImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Wgs84Point
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Wgs84PointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Waypoint
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WaypointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WaypointInfo
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WaypointInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Set<ProfileIndication> sse_decode_Set_profile_indication_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_profile_indication(deserializer);
    return Set.from(inner);
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  WaypointInfo
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
      deserializer,
    ));
  }

  @protected
  Parameters sse_decode_box_autoadd_parameters(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_parameters(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  Error sse_decode_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return Error_GPXNotFound();
      case 1:
        return Error_GPXInvalid();
      case 2:
        return Error_GPXHasNoSegment();
      case 3:
        var var_index = sse_decode_usize(deserializer);
        return Error_MissingElevation(index: var_index);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<Segment>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Segment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<Waypoint>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Waypoint>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ProfileIndication> sse_decode_list_profile_indication(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProfileIndication>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_profile_indication(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WaypointInfo?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Parameters sse_decode_parameters(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_debug = sse_decode_bool(deserializer);
    var var_maxStepSize = sse_decode_f_64(deserializer);
    var var_startTime = sse_decode_String(deserializer);
    var var_speed = sse_decode_f_64(deserializer);
    var var_segmentLength = sse_decode_f_64(deserializer);
    var var_segmentOverlap = sse_decode_f_64(deserializer);
    var var_smoothWidth = sse_decode_f_64(deserializer);
    var var_profileOptions = sse_decode_profile_options(deserializer);
    var var_npoints = sse_decode_i_32(deserializer);
    return Parameters(
      debug: var_debug,
      maxStepSize: var_maxStepSize,
      startTime: var_startTime,
      speed: var_speed,
      segmentLength: var_segmentLength,
      segmentOverlap: var_segmentOverlap,
      smoothWidth: var_smoothWidth,
      profileOptions: var_profileOptions,
      npoints: var_npoints,
    );
  }

  @protected
  ProfileIndication sse_decode_profile_indication(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ProfileIndication.values[inner];
  }

  @protected
  ProfileOptions sse_decode_profile_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_elevationIndicators = sse_decode_Set_profile_indication_None(
      deserializer,
    );
    return ProfileOptions(elevationIndicators: var_elevationIndicators);
  }

  @protected
  SegmentStatistics sse_decode_segment_statistics(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_length = sse_decode_f_64(deserializer);
    var var_elevationGain = sse_decode_f_64(deserializer);
    var var_distanceStart = sse_decode_f_64(deserializer);
    var var_distanceEnd = sse_decode_f_64(deserializer);
    return SegmentStatistics(
      length: var_length,
      elevationGain: var_elevationGain,
      distanceStart: var_distanceStart,
      distanceEnd: var_distanceEnd,
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WaypointOrigin sse_decode_waypoint_origin(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WaypointOrigin.values[inner];
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    Bridge self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BridgeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    Segment self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SegmentImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegmentImplementation(
    SegmentImplementation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SegmentImplementationImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point(
    Wgs84Point self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Wgs84PointImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    Waypoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WaypointImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    WaypointInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WaypointInfoImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    Bridge self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BridgeImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    Waypoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WaypointImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    WaypointInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WaypointInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    Bridge self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BridgeImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    Segment self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SegmentImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    Waypoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WaypointImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    WaypointInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WaypointInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBridge(
    Bridge self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BridgeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    Segment self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SegmentImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegmentImplementation(
    SegmentImplementation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SegmentImplementationImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWGS84Point(
    Wgs84Point self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Wgs84PointImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    Waypoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WaypointImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    WaypointInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WaypointInfoImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_Set_profile_indication_None(
    Set<ProfileIndication> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_profile_indication(self.toList(), serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
    RustStreamSink<String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    WaypointInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_parameters(
    Parameters self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_parameters(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_error(Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Error_GPXNotFound():
        sse_encode_i_32(0, serializer);
      case Error_GPXInvalid():
        sse_encode_i_32(1, serializer);
      case Error_GPXHasNoSegment():
        sse_encode_i_32(2, serializer);
      case Error_MissingElevation(index: final index):
        sse_encode_i_32(3, serializer);
        sse_encode_usize(index, serializer);
    }
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
    List<Segment> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSegment(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
    List<Waypoint> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypoint(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_profile_indication(
    List<ProfileIndication> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_profile_indication(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
    WaypointInfo? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaypointInfo(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
    BigInt? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_parameters(Parameters self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.debug, serializer);
    sse_encode_f_64(self.maxStepSize, serializer);
    sse_encode_String(self.startTime, serializer);
    sse_encode_f_64(self.speed, serializer);
    sse_encode_f_64(self.segmentLength, serializer);
    sse_encode_f_64(self.segmentOverlap, serializer);
    sse_encode_f_64(self.smoothWidth, serializer);
    sse_encode_profile_options(self.profileOptions, serializer);
    sse_encode_i_32(self.npoints, serializer);
  }

  @protected
  void sse_encode_profile_indication(
    ProfileIndication self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_profile_options(
    ProfileOptions self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Set_profile_indication_None(
      self.elevationIndicators,
      serializer,
    );
  }

  @protected
  void sse_encode_segment_statistics(
    SegmentStatistics self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.length, serializer);
    sse_encode_f_64(self.elevationGain, serializer);
    sse_encode_f_64(self.distanceStart, serializer);
    sse_encode_f_64(self.distanceEnd, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_waypoint_origin(
    WaypointOrigin self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }
}

@sealed
class BridgeImpl extends RustOpaque implements Bridge {
  // Not to be used by end users
  BridgeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BridgeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Bridge,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Bridge,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BridgePtr,
  );

  Future<Uint8List> generateGpx() =>
      RustLib.instance.api.crateApiBridgeBridgeGenerateGpx(that: this);

  Future<Uint8List> generatePdf() =>
      RustLib.instance.api.crateApiBridgeBridgeGeneratePdf(that: this);

  Parameters getParameters() =>
      RustLib.instance.api.crateApiBridgeBridgeGetParameters(that: this);

  List<Waypoint> getWaypoints({required Segment segment}) => RustLib
      .instance
      .api
      .crateApiBridgeBridgeGetWaypoints(that: this, segment: segment);

  Future<void> loadContent({required List<int> content}) => RustLib.instance.api
      .crateApiBridgeBridgeLoadContent(that: this, content: content);

  Future<void> loadDemo() =>
      RustLib.instance.api.crateApiBridgeBridgeLoadDemo(that: this);

  Future<void> loadFilename({required String filename}) => RustLib.instance.api
      .crateApiBridgeBridgeLoadFilename(that: this, filename: filename);

  Future<String> renderSegmentWhat({
    required Segment segment,
    required String what,
    required int w,
    required int h,
  }) => RustLib.instance.api.crateApiBridgeBridgeRenderSegmentWhat(
    that: this,
    segment: segment,
    what: what,
    w: w,
    h: h,
  );

  String renderSegmentWhatSync({
    required Segment segment,
    required String what,
    required int w,
    required int h,
  }) => RustLib.instance.api.crateApiBridgeBridgeRenderSegmentWhatSync(
    that: this,
    segment: segment,
    what: what,
    w: w,
    h: h,
  );

  List<Segment> segments() =>
      RustLib.instance.api.crateApiBridgeBridgeSegments(that: this);

  void setParameters({required Parameters parameters}) => RustLib.instance.api
      .crateApiBridgeBridgeSetParameters(that: this, parameters: parameters);

  Stream<String> setSink() =>
      RustLib.instance.api.crateApiBridgeBridgeSetSink(that: this);

  SegmentStatistics statistics() =>
      RustLib.instance.api.crateApiBridgeBridgeStatistics(that: this);

  List<Waypoint> waypointsTable({required Segment segment}) => RustLib
      .instance
      .api
      .crateApiBridgeBridgeWaypointsTable(that: this, segment: segment);
}

@sealed
class SegmentImpl extends RustOpaque implements Segment {
  // Not to be used by end users
  SegmentImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SegmentImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Segment,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Segment,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SegmentPtr,
  );

  BigInt id() => RustLib.instance.api.crateApiBridgeSegmentId(that: this);
}

@sealed
class SegmentImplementationImpl extends RustOpaque
    implements SegmentImplementation {
  // Not to be used by end users
  SegmentImplementationImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SegmentImplementationImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_SegmentImplementation,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_SegmentImplementation,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_SegmentImplementationPtr,
  );
}

@sealed
class WaypointImpl extends RustOpaque implements Waypoint {
  // Not to be used by end users
  WaypointImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WaypointImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Waypoint,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Waypoint,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WaypointPtr,
  );

  String? get description => RustLib.instance.api
      .crateApiBridgeWaypointAutoAccessorGetDescription(that: this);

  WaypointInfo? get info => RustLib.instance.api
      .crateApiBridgeWaypointAutoAccessorGetInfo(that: this);

  String? get name => RustLib.instance.api
      .crateApiBridgeWaypointAutoAccessorGetName(that: this);

  WaypointOrigin get origin => RustLib.instance.api
      .crateApiBridgeWaypointAutoAccessorGetOrigin(that: this);

  BigInt? get trackIndex => RustLib.instance.api
      .crateApiBridgeWaypointAutoAccessorGetTrackIndex(that: this);

  Wgs84Point get wgs84 => RustLib.instance.api
      .crateApiBridgeWaypointAutoAccessorGetWgs84(that: this);

  set description(String? description) =>
      RustLib.instance.api.crateApiBridgeWaypointAutoAccessorSetDescription(
        that: this,
        description: description,
      );

  set info(WaypointInfo? info) => RustLib.instance.api
      .crateApiBridgeWaypointAutoAccessorSetInfo(that: this, info: info);

  set name(String? name) => RustLib.instance.api
      .crateApiBridgeWaypointAutoAccessorSetName(that: this, name: name);

  set origin(WaypointOrigin origin) => RustLib.instance.api
      .crateApiBridgeWaypointAutoAccessorSetOrigin(that: this, origin: origin);

  set trackIndex(BigInt? trackIndex) =>
      RustLib.instance.api.crateApiBridgeWaypointAutoAccessorSetTrackIndex(
        that: this,
        trackIndex: trackIndex,
      );

  set wgs84(Wgs84Point wgs84) => RustLib.instance.api
      .crateApiBridgeWaypointAutoAccessorSetWgs84(that: this, wgs84: wgs84);
}

@sealed
class WaypointInfoImpl extends RustOpaque implements WaypointInfo {
  // Not to be used by end users
  WaypointInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WaypointInfoImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WaypointInfo,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WaypointInfo,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WaypointInfoPtr,
  );

  String get description => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetDescription(that: this);

  double get distance => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetDistance(that: this);

  double get elevation => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetElevation(that: this);

  double get interDistance => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetInterDistance(that: this);

  double get interElevationGain => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetInterElevationGain(that: this);

  double get interSlope => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetInterSlope(that: this);

  String get name => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetName(that: this);

  WaypointOrigin get origin => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetOrigin(that: this);

  String get time => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetTime(that: this);

  BigInt get trackIndex => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetTrackIndex(that: this);

  BigInt? get value => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetValue(that: this);

  Wgs84Point get wgs84 => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorGetWgs84(that: this);

  set description(String description) =>
      RustLib.instance.api.crateApiBridgeWaypointInfoAutoAccessorSetDescription(
        that: this,
        description: description,
      );

  set distance(double distance) =>
      RustLib.instance.api.crateApiBridgeWaypointInfoAutoAccessorSetDistance(
        that: this,
        distance: distance,
      );

  set elevation(double elevation) =>
      RustLib.instance.api.crateApiBridgeWaypointInfoAutoAccessorSetElevation(
        that: this,
        elevation: elevation,
      );

  set interDistance(double interDistance) => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorSetInterDistance(
        that: this,
        interDistance: interDistance,
      );

  set interElevationGain(double interElevationGain) => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorSetInterElevationGain(
        that: this,
        interElevationGain: interElevationGain,
      );

  set interSlope(double interSlope) =>
      RustLib.instance.api.crateApiBridgeWaypointInfoAutoAccessorSetInterSlope(
        that: this,
        interSlope: interSlope,
      );

  set name(String name) => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorSetName(that: this, name: name);

  set origin(WaypointOrigin origin) =>
      RustLib.instance.api.crateApiBridgeWaypointInfoAutoAccessorSetOrigin(
        that: this,
        origin: origin,
      );

  set time(String time) => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorSetTime(that: this, time: time);

  set trackIndex(BigInt trackIndex) =>
      RustLib.instance.api.crateApiBridgeWaypointInfoAutoAccessorSetTrackIndex(
        that: this,
        trackIndex: trackIndex,
      );

  set value(BigInt? value) => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorSetValue(that: this, value: value);

  set wgs84(Wgs84Point wgs84) => RustLib.instance.api
      .crateApiBridgeWaypointInfoAutoAccessorSetWgs84(that: this, wgs84: wgs84);
}

@sealed
class Wgs84PointImpl extends RustOpaque implements Wgs84Point {
  // Not to be used by end users
  Wgs84PointImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Wgs84PointImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Wgs84Point,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Wgs84Point,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_Wgs84PointPtr,
  );
}
